/*
 * Automatically generated by jrpcgen 1.0.7 on 13.06.2017
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
using org.acplt.oncrpc;

using System.Net;

using org.acplt.oncrpc.server;

/**
 */
public abstract class interfaceServerStub : OncRpcServerStub, OncRpcDispatchable {

    public interfaceServerStub() : this(0) {
    }

    public interfaceServerStub(int port) : this(null, port) {
    }

    public interfaceServerStub(IPAddress bindAddr, int port)
           {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(interface.SIMULATION, 1),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
            {
        if ( version == 1 ) {
            switch ( procedure ) {
            case 1: {
                MoveRequest args_ = new MoveRequest();
                call.retrieveCall(args_);
                MoveRobot_1(args_);
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 2: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                WorldStatus result_ = GetStatus_1();
                call.reply(result_);
                break;
            }
            default:
                call.failProcedureUnavailable();
                break;
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract void MoveRobot_1(MoveRequest arg1);

    public abstract WorldStatus GetStatus_1();

}
// End of interfaceServerStub.cs
