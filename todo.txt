cxnmwpotrm&$)1
-----

>1.3 geht mir zu unsystematisch vor. Mehr zwischen Details der Technik, dem Lernziel und mÃ¶glichen AnsÃ¤tzen / Fehlermodellen trennen.


>3. Vielleicht etwas mehr Motivation fÃ¼r die balanzierenden Roboter als solche - also warum dieses Projekt?

>Fehlermodell statt Nennung von MÃ¶glichkeiten?
zu aufwaendig

>5: Ziele priorisieren?

>5: Ich wÃ¼rde an den Anfang stellen, was "geliefert" wird und was die Studis machen mÃ¼ssen (nÃ¤mlich die Controller und deren Kommunikation). Das muss ganz klar deutlich gemacht werden, aktuell ist das aus dem Text heraus nicht nachvollziehbar.


>7: Fehlerfreiheit der SImulation besser begrÃ¼nden!

>5-7 lesen sich im Zusammenhang holprig und auch recht knapp.

>8: Hier wÃ¼rde ich eher Freiheitsgrade des Fehlermodells beschreiben - was man dann konkret einstellt, ist ja ohnehin eine andere Sache. Sie argumentieren hier mit Schwierigkeitsgraden usw..
> ich wÃ¼rde statt dessen eher die "Stellschrauben" vorstellen, die das Fehlermodell parametrisierbar machen.
kapiere ich nicht, ich sag doch was man alles aendern kann. Mhm naja hab
jedenfalls einen neuen Absatz dazugepackt

>10 Die Gameengine fÃ¤llt hier aus dem Himmel (oder ich habe das in 5-7 Ã¼bersehe)
Mhm ich sag doch vorher warum ich Physik- und Grafik haben wil (In
Architekturkonzept) und dann hier das die gameengine ja beides hat
vlt einfach mehr?


>Teil IV Implementation habe ich nur Ã¼berflogen




Zeitplan
--------
Deadline | Module		|	was
---------+--------------+-----------------------------------------------------------
		 | test_prog	| evaluationstests
		 |				| -> aufladen
		 | unity		| wenn Robot dod -> Rauch
		 |				| Die Platte kippt zu krass, falsch, alles moegliche...
		 |				|  z.B. 
		 |				| ?Iwie fÃ¤llt ab dem dritten roboter alle durch?
		 |				| Laden die Roboter noch? --> muesste fertig sein
		 @				| roboter lampe
		 | misc			| mutex in libnetwork, beim warten auf robot id
		 |				| udp packet groesse anpassen
---------+--------------+----------------


fixe ideen
----------
momentan les ich immer nur ein packet bei jedem poll() aufruf...

refactoring
-----------
Todo: ECCUDP ausplitten -> mindestens der broadcast socket kann auch gut eine einzelene Klasse sein
	  Packet soll absender erhalten. aehh aber beim senden macht das ja keinen Sinn?

Zusammenhanglose Notizen
------------------------
recv rpidev01
$ nc -ulp 7777 -s 192.168.38.181

send qemudev
$ nc -u 192.168.38.181 7777

broadcast test:
qemudev: nc -ub 192.168.38.255 7777 -s 192.168.38.182
	socat - UDP-DATAGRAM:192.168.38.255:7777,broadcast
rpidev01: nc -ulp 7777 192.168.38.181

Im Unity Editor nicht "Is Trigger" anschalten, dann kollidiert es nicht mehr
